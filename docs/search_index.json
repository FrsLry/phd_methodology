[
["random-forest.html", "4 Random Forest 4.1 Atlas data 4.2 JPSP data 4.3 Merged data", " 4 Random Forest library(randomForest) library(rpart) library(MLmetrics) library(pdp) library(tidyverse) library(ggpubr) 4.1 Atlas data ## Load data load(&quot;data/czech_bird/CART_DATA/atlas_cart_data.Rdata&quot;) ## Load random forest rf_full &lt;- readRDS(&quot;RF/rf_atlas.RDS&quot;) Let’s learn the model, with 500 trees, 2 variables sampled at each split (mtry = 2) and a minimum size of the terminal node of 5 rf_full &lt;- randomForest::randomForest(sr ~ Lat + Long + AREA + Date + polypoint_ratio + time_span, data = atlas_cart_data, ntree = 500, mtry = 2, nodesize = 5, keep.forest = T) ## Print the info rf_full ## ## Call: ## randomForest(formula = sr ~ Lat + Long + AREA + Date + polypoint_ratio + time_span, data = atlas_cart_data, ntree = 500, mtry = 2, nodesize = 5, keep.forest = T) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 2 ## ## Mean of squared residuals: 247.7114 ## % Var explained: 60.9 ## And predict species richness from the data pred &lt;- predict(rf_full) Note: removing the elongation index seems to explain a bit more the variance. Compute the metrics: metrics &lt;- c(&quot;MSE&quot;, &quot;RMSE&quot;, &quot;MAE&quot;, &quot;R2_Score&quot;) for(i in 1:length(metrics)){ print(paste(metrics[i], &quot; = &quot;, get(metrics[i])(pred, atlas_cart_data$sr))) } ## [1] &quot;MSE = 247.71137187893&quot; ## [1] &quot;RMSE = 15.7388491281583&quot; ## [1] &quot;MAE = 12.2546422338623&quot; ## [1] &quot;R2_Score = 0.609042379637325&quot; And plot the predictions against the actual values: plot(atlas_cart_data$sr, pred, xlab = &quot;Observed\\nSpecies Richness&quot;, ylab = &quot;Predicted Species Richness&quot;, main = &quot;Fig. 1: random forest predicted vs.observed species richness&quot;, cex.main = .8, font.main = 3, asp = 1) abline(a = 0, b = 1, col = &quot;red&quot;) atlas_cart_data %&gt;% cbind(pred) %&gt;% ggplot() + geom_point(aes(sr, pred, color = AREA))+ # ggtitle(&quot;Fig. 2: random forest predicted vs. observed species richness&quot;)+ labs(color = &quot;Area (Km²)&quot;)+ theme(panel.background = element_blank(), axis.line = element_line(&quot;black&quot;), plot.title = element_text(face = &quot;italic&quot;, size = 10, hjust = 0.5))+ geom_abline(color = &quot;red&quot;, size = .8)+ coord_fixed()+ xlab(&quot;Observed\\nSpecies Richness&quot;)+ ylab(&quot;Predicted\\nSpecies Richness&quot;) Variable importance: varImpPlot(rf_full) Partial plots: tmpp &lt;- pdp::partial(rf_full, pred.var = c(&quot;Date&quot;, &quot;AREA&quot;), plot = T, plot.engine = &quot;ggplot2&quot;) tmpp &lt;- tmpp + # ggtitle(&quot;Fig. 3: marginal plot representing the species richness as a function of space and time&quot;)+ theme(panel.background = element_blank(), # axis.line = element_line(colour = &quot;black&quot;), plot.title = element_text(size = 10, face = &quot;italic&quot;, hjust = .5)) tmpp2 &lt;- pdp::partial(rf_full, pred.var = c(&quot;Date&quot;, &quot;AREA&quot;)) tmpp2 &lt;- plotPartial(tmpp2, levelplot = F) annotate_figure(ggarrange(tmpp, tmpp2), top = text_grob(&quot;Fig. 3: marginal plots representing in two ways the species richness (i.e. yhat) as a function of space and time&quot;, face = &quot;italic&quot;)) ## Warning: Use of `object[[1L]]` is discouraged. Use `.data[[1L]]` instead. ## Warning: Use of `object[[2L]]` is discouraged. Use `.data[[2L]]` instead. ## Warning: Use of `object[[&quot;yhat&quot;]]` is discouraged. Use `.data[[&quot;yhat&quot;]]` ## instead. ## Warning: Use of `object[[&quot;yhat&quot;]]` is discouraged. Use `.data[[&quot;yhat&quot;]]` ## instead. # Create the vector of independant variables predvar &lt;- colnames(atlas_cart_data)[grepl(&quot;[^sr]&quot;, colnames(atlas_cart_data))] # Now print the partial plots with each predictors for(i in 1:(length(colnames(atlas_cart_data))-1)){ print( pdp::partial(rf_full, pred.var = predvar[i], plot = T, rug = T) ) } ## Learn the partial dependances: ################ # the arg chull is for convex hull to avoid extrapolation partial1 &lt;- pdp::partial(rf_full, pred.var = c(&quot;Long&quot;, &quot;Lat&quot;), chull = T) p1 &lt;- pdp::partial(rf_full, pred.var = c(&quot;Date&quot;, &quot;AREA&quot;), chull = T, plot = T) # p2 &lt;- partial(rf_full, pred.var = c(&quot;polypoint_ratio&quot;, &quot;AREA&quot;), chull = T, plot = T) p2 &lt;- plotPartial(partial1, levelplot = F) grid.arrange(p1, p2, nrow = 1) 4.2 JPSP data library(parallel) library(doParallel) ## Warning: package &#39;doParallel&#39; was built under R version 4.0.3 ## Loading required package: foreach ## Warning: package &#39;foreach&#39; was built under R version 4.0.3 ## ## Attaching package: &#39;foreach&#39; ## The following objects are masked from &#39;package:purrr&#39;: ## ## accumulate, when ## Loading required package: iterators ## Warning: package &#39;iterators&#39; was built under R version 4.0.3 # Load data load(&quot;data/czech_bird/CART_DATA/JPSP_cart_data.Rdata&quot;) # First, convert the date into a numeric format (here time stamp since 1970-01-01) JPSP_cart_data$Date &lt;- as.numeric(JPSP_cart_data$Date) ##&quot; Load the random forest rf_full_JPSP &lt;- readRDS(&quot;RF/rf_JPSP.RDS&quot;) ## Subset a sample from the JPSP dataset JPSP_sample &lt;- JPSP_cart_data[sample(nrow(JPSP_cart_data), nrow(JPSP_cart_data)/15),] ##Try to parallelize registerDoParallel(makePSOCKcluster(4)) ## Learn the model rf_full_JPSP &lt;- randomForest::randomForest(sr ~ Lat + Long + AREA + Date + polypoint_ratio + time_span, # data = JPSP_sample, data = JPSP_cart_data, ntree = 500, mtry = 2, nodesize = 5, keep.forest = T) ## Print the info rf_full_JPSP ## ## Call: ## randomForest(formula = sr ~ Lat + Long + AREA + Date + polypoint_ratio + time_span, data = JPSP_cart_data, ntree = 500, mtry = 2, nodesize = 5, keep.forest = T) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 2 ## ## Mean of squared residuals: 14.22528 ## % Var explained: 84.2 ## And predict species richness from the data pred_JPSP &lt;- predict(rf_full_JPSP) Compute the metrics metrics &lt;- c(&quot;MSE&quot;, &quot;RMSE&quot;, &quot;MAE&quot;, &quot;R2_Score&quot;) for(i in 1:length(metrics)){ print(paste(metrics[i], &quot; = &quot;, get(metrics[i])(pred_JPSP, JPSP_cart_data$sr))) } ## [1] &quot;MSE = 14.2252750329741&quot; ## [1] &quot;RMSE = 3.77164089395771&quot; ## [1] &quot;MAE = 2.89609188639488&quot; ## [1] &quot;R2_Score = 0.841961154983274&quot; Plot the predictions against the real data: plot(JPSP_cart_data$sr, pred_JPSP) abline(a = 0, b = 1, col = &quot;red&quot;) Importance of each variable: varImpPlot(rf_full_JPSP) Partial plots: # Create the vector of independant variables predvar &lt;- colnames(JPSP_cart_data)[grepl(&quot;[^sr]&quot;, colnames(JPSP_cart_data))] # Now print the partial plots with each predictors for(i in 1:(length(colnames(JPSP_cart_data))-1)){ print( pdp::partial(rf_full_JPSP, plot = T, pred.var = predvar[i], rug = T) ) } # partial2 &lt;- partial(rf_full_JPSP, pred.var = c(&quot;Long&quot;, &quot;Lat&quot;), chull = T) ## Multiple partial plot p1 &lt;- pdp::partial(rf_full_JPSP, pred.var = c(&quot;Date&quot;, &quot;AREA&quot;), plot = T, chull = T) p2 &lt;- plotPartial(partial2, levelplot = F) grid.arrange(p1, p2, nrow = 1) Note that we only have 4 different areas here. 4.3 Merged data ## Load the random forest rf_all &lt;- readRDS(&quot;RF/rf_all.RDS&quot;) ## Merge the data all &lt;- rbind(atlas_cart_data, JPSP_cart_data) ##Try to parallelize registerDoParallel(makePSOCKcluster(4)) ## Learn the model rf_all &lt;- randomForest::randomForest(sr ~ Lat + Long + AREA + Date + polypoint_ratio + time_span, data = all, ntree = 500, mtry = 2, nodesize = 5, keep.forest = T) ## Print the info rf_all ## ## Call: ## randomForest(formula = sr ~ Lat + Long + AREA + Date + polypoint_ratio + time_span, data = all, ntree = 500, mtry = 2, nodesize = 5, keep.forest = T) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 2 ## ## Mean of squared residuals: 25.16373 ## % Var explained: 95.4 ## And predict species richness from the data pred_all &lt;- predict(rf_all) Compute the metrics metrics &lt;- c(&quot;MSE&quot;, &quot;RMSE&quot;, &quot;MAE&quot;, &quot;R2_Score&quot;) for(i in 1:length(metrics)){ print(paste(metrics[i], &quot; = &quot;, get(metrics[i])(pred_all, all$sr))) } ## [1] &quot;MSE = 25.1637319491936&quot; ## [1] &quot;RMSE = 5.01634647419749&quot; ## [1] &quot;MAE = 3.31109088227984&quot; ## [1] &quot;R2_Score = 0.954025560012597&quot; plot(all$sr, pred_all) abline(a = 0, b = 1, col = &quot;red&quot;, asp = 1) Importance of the variables: varImpPlot(rf_all) Partial plots: # Create the vector of independant variables predvar &lt;- colnames(all)[grepl(&quot;[^sr]&quot;, colnames(all))] # Now print the partial plots with each predictors (it seems that I need to specify the training data here, not found in the rf object, maybe due to a lack of memory??) for(i in 1:(length(colnames(all))-1)){ tmp_plot &lt;- pdp::partial(rf_all, plot = T, pred.var = predvar[i], rug = T, train = all, plot.engine = &quot;ggplot2&quot;) ggsave(paste0(&quot;RF/partial_plots/atlas_plus_JPSP/&quot;,predvar[i], &quot;.jpg&quot;), plot = tmp_plot) } files &lt;- list.files(&quot;RF/partial_plots/atlas_plus_JPSP/&quot;, full.names = T) knitr::include_graphics(files, dpi = 20) "]
]
